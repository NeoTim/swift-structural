import GenericCore

% for N in range(1, 17):

public struct Point${N}: Equatable, Hashable, Codable {
    
    % for i in range(1, N + 1):
    public var _${i}: Float
    % end 

    public init(
    % for i in range(1, N + 1):
        _${i}: Float
    % if i != N:
        ,
    % end
    % end
    ) {
        % for i in range(1, N + 1):
        self._${i} = _${i}
        % end
    }

}

extension Point${N}: Generic {
    // swift-format-ignore
    public typealias Representation =
        Struct<
            % for i in range(1, N + 1):
            Field<Float, 
            % end
            Empty
            % for i in range(1, N + 1):
            >
            % end
        >

    // swift-format-ignore
    public var representation: Representation {
        return Struct("Point${i}", 
            % for i in range(1, N + 1):
            Field("_${i}", _${i}, isMutable: true,
            % end 
            Empty()
            % for i in range(1, N + 1):
            )
            % end
        )
    }

    public init(representation: Representation) {
        % for i in range(1, N + 1):
        self._${i} =
            representation.shape
            % for j in range(i - 1):
            .next
            % end
            .value
        % end
    }
}

extension Point${i}: EquatableGeneric {
    public func genericEqual(_ other: Self) -> Bool {
        return self.representation.genericEqual(other.representation)
    }
}

extension Point${i}: HashableGeneric {
    public func genericHash(into hasher: inout Hasher) {
        self.representation.genericHash(into: &hasher)
    }
}

extension Point${i}: AdditiveArithmeticGeneric {
    public static var zero: Self {
        return .init(representation: Representation.zero)
    }

    public static func + (lhs: Self, rhs: Self) -> Self {
        return .init(representation: lhs.representation + rhs.representation)
    }
}

extension Point${i}: DebugStringGeneric {
    public var debugDescriptionGeneric: String {
        return self.representation.debugDescriptionGeneric
    }
}

extension Point${i}: ComparableGeneric {
    public func genericLess(_ other: Self) -> Bool {
        return self.representation.genericLess(other.representation)
    }

    public func genericLessOrEqual(_ other: Self) -> Bool {
        return self.representation.genericLess(other.representation)
    }

    public func genericGreater(_ other: Self) -> Bool {
        return self.representation.genericLess(other.representation)
    }

    public func genericGreaterOrEqual(_ other: Self) -> Bool {
        return self.representation.genericLess(other.representation)
    }
}

extension Point${i}: EncodeJSONGeneric {
    public func encodeJson(into builder: inout JSONBuilder) {
        self.representation.encodeJson(into: &builder)
    }
}

extension Point${i}: InplaceAddGeneric {
    public mutating func inplaceAdd(_ other: Point${i}) {
        let shape = self.representation
        shape.inplaceAdd(other.representation)
        self = .init(representation: shape)
    }
}

% end
